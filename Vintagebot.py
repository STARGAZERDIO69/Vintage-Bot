import logging
import asyncio
import random
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# рЃЎрЃЮрЃюрЃцрЃўрЃњрЃБрЃарЃљрЃфрЃўрЃљ
API_TOKEN = V
ADMIN_USER_ID = Vintagebot  # рЃЕрЃљрЃљрЃюрЃљрЃфрЃЋрЃџрЃћрЃЌ рЃЌрЃЦрЃЋрЃћрЃюрЃў рЃбрЃћрЃџрЃћрЃњрЃарЃљрЃЏрЃўрЃА ID-рЃўрЃЌ

# рЃЏрЃЮрЃюрЃљрЃфрЃћрЃЏрЃЌрЃљ рЃЉрЃљрЃќрЃўрЃА рЃўрЃЏрЃўрЃбрЃљрЃфрЃўрЃљ (рЃарЃћрЃљрЃџрЃБрЃа рЃљрЃърЃџрЃўрЃЎрЃљрЃфрЃўрЃљрЃерЃў рЃБрЃюрЃЊрЃљ рЃњрЃљрЃЏрЃЮрЃўрЃДрЃћрЃюрЃЮрЃЌ рЃюрЃљрЃЏрЃЊрЃЋрЃўрЃџрЃў рЃЉрЃљрЃќрЃљ)
users_db = {}
songs_db = [
    {"id": 1, "title": "рЃЏрЃБрЃАрЃўрЃЎрЃљ 1", "artist": "рЃерЃћрЃЏрЃАрЃарЃБрЃџрЃћрЃЉрЃћрЃџрЃў 1", "duration": 180, "coins": 5},
    {"id": 2, "title": "рЃЏрЃБрЃАрЃўрЃЎрЃљ 2", "artist": "рЃерЃћрЃЏрЃАрЃарЃБрЃџрЃћрЃЉрЃћрЃџрЃў 2", "duration": 210, "coins": 6},
    {"id": 3, "title": "рЃЏрЃБрЃАрЃўрЃЎрЃљ 3", "artist": "рЃерЃћрЃЏрЃАрЃарЃБрЃџрЃћрЃЉрЃћрЃџрЃў 3", "duration": 240, "coins": 7},
    {"id": 4, "title": "рЃЏрЃБрЃАрЃўрЃЎрЃљ 4", "artist": "рЃерЃћрЃЏрЃАрЃарЃБрЃџрЃћрЃЉрЃћрЃџрЃў 4", "duration": 190, "coins": 5},
    {"id": 5, "title": "рЃЏрЃБрЃАрЃўрЃЎрЃљ 5", "artist": "рЃерЃћрЃЏрЃАрЃарЃБрЃџрЃћрЃЉрЃћрЃџрЃў 5", "duration": 200, "coins": 6},
]

# рЃџрЃЮрЃњрЃўрЃарЃћрЃЉрЃўрЃА рЃЎрЃЮрЃюрЃцрЃўрЃњрЃБрЃарЃљрЃфрЃўрЃљ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# рЃЉрЃЮрЃбрЃўрЃА рЃўрЃюрЃўрЃфрЃўрЃљрЃџрЃўрЃќрЃљрЃфрЃўрЃљ
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# рЃАрЃбрЃљрЃбрЃБрЃАрЃћрЃЉрЃўрЃА рЃЎрЃџрЃљрЃАрЃў
class UserStates(StatesGroup):
    listening = State()
    menu = State()
    shop = State()

# рЃЏрЃЮрЃЏрЃ«рЃЏрЃљрЃарЃћрЃЉрЃџрЃўрЃА рЃЏрЃЮрЃЊрЃћрЃџрЃў
class User:
    def __init__(self, user_id, username):
        self.user_id = user_id
        self.username = username
        self.coins = 0
        self.energy = 100
        self.last_energy_update = datetime.now()
        self.current_song = None
        self.listening_start_time = None
        self.daily_listened = 0
        self.daily_reset = datetime.now()
        self.items = []

    def update_energy(self):
        now = datetime.now()
        if self.last_energy_update:
            # рЃДрЃЮрЃЋрЃћрЃџ 5 рЃгрЃБрЃЌрЃерЃў 1 рЃћрЃюрЃћрЃарЃњрЃўрЃўрЃА рЃљрЃдрЃЊрЃњрЃћрЃюрЃљ
            minutes_passed = (now - self.last_energy_update).total_seconds() / 60
            energy_to_add = int(minutes_passed / 5)
            
            if energy_to_add > 0:
                self.energy = min(100, self.energy + energy_to_add)
                self.last_energy_update = now

    def reset_daily_if_needed(self):
        now = datetime.now()
        if now.date() > self.daily_reset.date():
            self.daily_listened = 0
            self.daily_reset = now
            return True
        return False

# рЃЎрЃџрЃљрЃЋрЃўрЃљрЃбрЃБрЃарЃўрЃА рЃерЃћрЃЦрЃЏрЃюрЃўрЃА рЃцрЃБрЃюрЃЦрЃфрЃўрЃћрЃЉрЃў
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("­Ъјх рЃЏрЃЮрЃБрЃАрЃЏрЃўрЃюрЃћ рЃЏрЃБрЃАрЃўрЃЎрЃљрЃА", callback_data="listen"),
        InlineKeyboardButton("­ЪЈф рЃЏрЃљрЃдрЃљрЃќрЃўрЃљ", callback_data="shop"),
        InlineKeyboardButton("­ЪЉц рЃърЃарЃЮрЃцрЃўрЃџрЃў", callback_data="profile"),
        InlineKeyboardButton("­ЪЊі рЃарЃћрЃўрЃбрЃўрЃюрЃњрЃў", callback_data="leaderboard")
    )
    return keyboard

def get_songs_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    for song in songs_db:
        keyboard.add(
            InlineKeyboardButton(
                f"{song['title']} - {song['artist']} ({song['duration']//60}:{song['duration']%60:02d}) - {song['coins']} ­ЪфЎ", 
                callback_data=f"song_{song['id']}"
            )
        )
    keyboard.add(InlineKeyboardButton("­ЪћЎ рЃЏрЃЌрЃљрЃЋрЃљрЃа рЃЏрЃћрЃюрЃўрЃБрЃерЃў", callback_data="back_to_main"))
    return keyboard

def get_shop_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("РџА рЃћрЃюрЃћрЃарЃњрЃўрЃљ +50 (100 ­ЪфЎ)", callback_data="buy_energy"),
        InlineKeyboardButton("РЈ▒ рЃЊрЃарЃЮрЃўрЃА рЃљрЃЏрЃљрЃЕрЃЦрЃљрЃарЃћрЃЉрЃћрЃџрЃў (200 ­ЪфЎ)", callback_data="buy_booster"),
        InlineKeyboardButton("­ЪїЪ VIP рЃАрЃбрЃљрЃбрЃБрЃАрЃў (500 ­ЪфЎ)", callback_data="buy_vip"),
        InlineKeyboardButton("­ЪћЎ рЃЏрЃЌрЃљрЃЋрЃљрЃа рЃЏрЃћрЃюрЃўрЃБрЃерЃў", callback_data="back_to_main")
    )
    return keyboard

def get_listening_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("РЈ╣ рЃерЃћрЃгрЃДрЃЋрЃћрЃбрЃљ", callback_data="stop_listening"),
        InlineKeyboardButton("Рё╣№ИЈ рЃўрЃюрЃцрЃЮрЃарЃЏрЃљрЃфрЃўрЃљ", callback_data="song_info")
    )
    return keyboard

# рЃЎрЃЮрЃЏрЃљрЃюрЃЊрЃћрЃЉрЃўрЃА рЃ░рЃћрЃюрЃЊрЃџрЃћрЃарЃћрЃЉрЃў
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    if user_id not in users_db:
        users_db[user_id] = User(user_id, username)
        await message.answer(
            f"рЃЏрЃЮрЃњрЃћрЃАрЃљрЃџрЃЏрЃћрЃЉрЃў {username}! ­ЪЉІ\n\n"
            f"рЃћрЃА рЃљрЃарЃўрЃА рЃЏрЃБрЃАрЃўрЃЎрЃљрЃџрЃБрЃарЃў рЃЌрЃљрЃЏрЃљрЃерЃў, рЃАрЃљрЃЊрЃљрЃф рЃерЃћрЃњрЃўрЃФрЃџрЃўрЃљ:\n"
            f"- рЃЏрЃЮрЃБрЃАрЃЏрЃўрЃюрЃЮ рЃЏрЃБрЃАрЃўрЃЎрЃљрЃА рЃЊрЃљ рЃЏрЃўрЃўрЃдрЃЮ рЃЏрЃЮрЃюрЃћрЃбрЃћрЃЉрЃў ­ЪфЎ\n"
            f"- рЃерЃћрЃўрЃФрЃўрЃюрЃЮ рЃАрЃ«рЃЋрЃљрЃЊрЃљрЃАрЃ«рЃЋрЃљ рЃюрЃўрЃЋрЃЌрЃћрЃЉрЃў рЃЏрЃљрЃдрЃљрЃќрЃўрЃљрЃерЃў ­ЪЈф\n"
            f"- рЃерЃћрЃљрЃЊрЃљрЃарЃЮ рЃерЃћрЃюрЃў рЃЏрЃўрЃдрЃгрЃћрЃЋрЃћрЃЉрЃў рЃАрЃ«рЃЋрЃћрЃЉрЃА ­ЪЊі\n\n"
            f"рЃЊрЃљрЃўрЃгрЃДрЃћ рЃљрЃ«рЃџрЃљрЃЋрЃћ рЃЏрЃБрЃАрЃўрЃЎрЃўрЃА рЃЏрЃЮрЃАрЃЏрЃћрЃюрЃўрЃЌ!", 
            reply_markup=get_main_keyboard()
        )
    else:
        user = users_db[user_id]
        user.update_energy()
        user.reset_daily_if_needed()
        
        await message.answer(
            f"рЃЏрЃЮрЃњрЃћрЃАрЃљрЃџрЃЏрЃћрЃЉрЃў рЃўрЃАрЃћрЃЋ, {username}! ­ЪЉІ\n\n"
            f"рЃерЃћрЃюрЃў рЃЉрЃљрЃџрЃљрЃюрЃАрЃў: {user.coins} ­ЪфЎ\n"
            f"рЃћрЃюрЃћрЃарЃњрЃўрЃљ: {user.energy}/100 РџА\n\n"
            f"рЃарЃўрЃАрЃў рЃњрЃљрЃЎрЃћрЃЌрЃћрЃЉрЃљ рЃњрЃАрЃБрЃарЃА?",
            reply_markup=get_main_keyboard()
        )

@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    await message.answer(
        "­Ъј« рЃЌрЃљрЃЏрЃљрЃерЃўрЃА рЃгрЃћрЃАрЃћрЃЉрЃў:\n\n"
        "1. рЃЏрЃЮрЃБрЃАрЃЏрЃўрЃюрЃћ рЃЏрЃБрЃАрЃўрЃЎрЃљрЃА рЃЊрЃљ рЃЏрЃўрЃўрЃдрЃћ рЃЏрЃЮрЃюрЃћрЃбрЃћрЃЉрЃў ­ЪфЎ\n"
        "2. рЃДрЃЮрЃЋрЃћрЃџ рЃЏрЃЮрЃАрЃЏрЃћрЃюрЃљрЃќрЃћ рЃўрЃ«рЃљрЃарЃ»рЃћрЃЉрЃљ рЃћрЃюрЃћрЃарЃњрЃўрЃљ РџА\n"
        "3. рЃћрЃюрЃћрЃарЃњрЃўрЃљ рЃЌрЃљрЃЋрЃўрЃАрЃўрЃЌ рЃўрЃЋрЃАрЃћрЃЉрЃљ рЃЊрЃарЃЮрЃЌрЃљ рЃњрЃљрЃюрЃЏрЃљрЃЋрЃџрЃЮрЃЉрЃљрЃерЃў\n"
        "4. рЃерЃћрЃњрЃўрЃФрЃџрЃўрЃљ рЃўрЃДрЃўрЃЊрЃЮ рЃюрЃўрЃЋрЃЌрЃћрЃЉрЃў рЃЏрЃљрЃдрЃљрЃќрЃўрЃљрЃерЃў\n"
        "5. рЃДрЃЮрЃЋрЃћрЃџрЃЊрЃдрЃўрЃБрЃарЃў рЃџрЃўрЃЏрЃўрЃбрЃў: 20 рЃАрЃўрЃЏрЃдрЃћрЃарЃљ\n\n"
        "рЃЉрЃарЃФрЃљрЃюрЃћрЃЉрЃћрЃЉрЃў:\n"
        "/start - рЃЌрЃљрЃЏрЃљрЃерЃўрЃА рЃЊрЃљрЃгрЃДрЃћрЃЉрЃљ\n"
        "/profile - рЃерЃћрЃюрЃў рЃърЃарЃЮрЃцрЃўрЃџрЃўрЃА рЃюрЃљрЃ«рЃЋрЃљ\n"
        "/shop - рЃЏрЃљрЃдрЃљрЃќрЃўрЃљрЃерЃў рЃерЃћрЃАрЃЋрЃџрЃљ\n"
        "/help - рЃћрЃА рЃўрЃюрЃцрЃЮрЃарЃЏрЃљрЃфрЃўрЃљ",
        reply_markup=get_main_keyboard()
    )

@dp.message_handler(commands=['profile'])
async def cmd_profile(message: types.Message):
    user_id = message.from_user.id
    if user_id in users_db:
        user = users_db[user_id]
        user.update_energy()
        user.reset_daily_if_needed()
        
        items_text = "рЃљрЃарЃљрЃцрЃћрЃарЃў" if not user.items else ", ".join(user.items)
        
        await message.answer(
            f"­ЪЉц *рЃерЃћрЃюрЃў рЃърЃарЃЮрЃцрЃўрЃџрЃў*\n\n"
            f"рЃАрЃљрЃ«рЃћрЃџрЃў: {user.username}\n"
            f"рЃЏрЃЮрЃюрЃћрЃбрЃћрЃЉрЃў: {user.coins} ­ЪфЎ\n"
            f"рЃћрЃюрЃћрЃарЃњрЃўрЃљ: {user.energy}/100 РџА\n"
            f"рЃЊрЃдрЃћрЃА рЃЏрЃЮрЃАрЃЏрЃћрЃюрЃўрЃџрЃў: {user.daily_listened}/20 ­Ъјх\n"
            f"рЃерЃћрЃюрЃў рЃюрЃўрЃЋрЃЌрЃћрЃЉрЃў: {items_text}\n\n"
            f"рЃарЃўрЃАрЃў рЃњрЃљрЃЎрЃћрЃЌрЃћрЃЉрЃљ рЃњрЃАрЃБрЃарЃА рЃерЃћрЃЏрЃЊрЃћрЃњ?",
            parse_mode="Markdown",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            "рЃњрЃЌрЃ«рЃЮрЃЋрЃЌ, рЃ»рЃћрЃа рЃЊрЃљрЃўрЃгрЃДрЃћрЃЌ рЃЌрЃљрЃЏрЃљрЃерЃў /start рЃЉрЃарЃФрЃљрЃюрЃћрЃЉрЃўрЃЌ."
        )

# рЃЎрЃЮрЃџрЃЉрЃћрЃЦрЃћрЃЉрЃўрЃА рЃ░рЃћрЃюрЃЊрЃџрЃћрЃарЃћрЃЉрЃў
@dp.callback_query_handler(lambda c: c.data == 'listen', state='*')
async def process_listen(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user = users_db.get(user_id)
    
    if not user:
        await callback_query.answer("рЃњрЃЌрЃ«рЃЮрЃЋрЃЌ, рЃ»рЃћрЃа рЃЊрЃљрЃўрЃгрЃДрЃћрЃЌ рЃЌрЃљрЃЏрЃљрЃерЃў /start рЃЉрЃарЃФрЃљрЃюрЃћрЃЉрЃўрЃЌ.")
        return
    
    user.update_energy()
    user.reset_daily_if_needed()
    
    if user.daily_listened >= 20:
        await callback_query.answer("рЃЊрЃдрЃћрЃА рЃБрЃЎрЃЋрЃћ рЃЏрЃўрЃљрЃдрЃгрЃўрЃћ рЃџрЃўрЃЏрЃўрЃбрЃА (20 рЃАрЃўрЃЏрЃдрЃћрЃарЃљ). рЃАрЃфрЃљрЃЊрЃћ рЃ«рЃЋрЃљрЃџ!")
        return
    
    if user.energy < 10:
        await callback_query.answer("рЃљрЃа рЃњрЃљрЃЦрЃЋрЃА рЃАрЃљрЃЎрЃЏрЃљрЃарЃўрЃАрЃў рЃћрЃюрЃћрЃарЃњрЃўрЃљ. рЃЊрЃљрЃћрЃџрЃЮрЃЊрЃћ рЃљрЃдрЃЊрЃњрЃћрЃюрЃљрЃА рЃљрЃю рЃўрЃДрЃўрЃЊрЃћ рЃЏрЃљрЃдрЃљрЃќрЃўрЃљрЃерЃў.")
        return
    
    await callback_query.message.edit_text(
        "рЃљрЃўрЃарЃЕрЃўрЃћ рЃАрЃўрЃЏрЃдрЃћрЃарЃљ рЃЏрЃЮрЃАрЃљрЃАрЃЏрЃћрЃюрЃљрЃЊ:",
        reply_markup=get_songs_keyboard()
    )
    await UserStates.menu.set()

@dp.callback_query_handler(lambda c: c.data.startswith('song_'), state=UserStates.menu)
async def process_song_selection(callback_query: types.CallbackQuery, state: FSMContext):
    song_id = int(callback_query.data.split('_')[1])
    user_id = callback_query.from_user.id
    user = users_db.get(user_id)
    
    selected_song = None
    for song in songs_db:
        if song['id'] == song_id:
            selected_song = song
            break
    
    if not selected_song:
        await callback_query.answer("рЃАрЃўрЃЏрЃдрЃћрЃарЃљ рЃЋрЃћрЃа рЃЏрЃЮрЃўрЃФрЃћрЃЉрЃюрЃљ. рЃАрЃфрЃљрЃЊрЃћ рЃАрЃ«рЃЋрЃљ.")
        return
    
    if user.energy < 10:
        await callback_query.answer("рЃљрЃа рЃњрЃљрЃЦрЃЋрЃА рЃАрЃљрЃЎрЃЏрЃљрЃарЃўрЃАрЃў рЃћрЃюрЃћрЃарЃњрЃўрЃљ!")
        return
    
    # рЃАрЃўрЃЏрЃдрЃћрЃарЃўрЃА рЃЏрЃЮрЃАрЃЏрЃћрЃюрЃўрЃА рЃЊрЃљрЃгрЃДрЃћрЃЉрЃљ
    user.current_song = selected_song
    user.listening_start_time = datetime.now()
    user.energy -= 10
    user.last_energy_update = datetime.now()
    
    # рЃЏрЃЮрЃАрЃЏрЃћрЃюрЃўрЃА рЃАрЃўрЃЏрЃБрЃџрЃљрЃфрЃўрЃљ - рЃарЃћрЃљрЃџрЃБрЃарЃљрЃЊ рЃљрЃЦ рЃБрЃюрЃЊрЃљ рЃўрЃДрЃЮрЃА рЃЏрЃБрЃАрЃўрЃЎрЃўрЃА URL рЃљрЃю рЃцрЃљрЃўрЃџрЃў
    listening_message = await callback_query.message.edit_text(
        f"­Ъјх рЃљрЃ«рЃџрЃљ рЃўрЃАрЃЏрЃћрЃю: *{selected_song['title']}* - {selected_song['artist']}\n\n"
        f"РЈ│ рЃ«рЃљрЃюрЃњрЃарЃФрЃџрЃўрЃЋрЃЮрЃЉрЃљ: {selected_song['duration']//60}:{selected_song['duration']%60:02d}\n"
        f"­Ъњ░ рЃЏрЃЮрЃАрЃљрЃџрЃЮрЃЊрЃюрЃћрЃџрЃў рЃЏрЃЮрЃюрЃћрЃбрЃћрЃЉрЃў: {selected_song['coins']} ­ЪфЎ\n\n"
        f"рЃњрЃЌрЃ«рЃЮрЃЋрЃЌ, рЃЊрЃљрЃћрЃџрЃЮрЃЊрЃћрЃЌ рЃАрЃўрЃЏрЃдрЃћрЃарЃўрЃА рЃЊрЃљрЃАрЃарЃБрЃџрЃћрЃЉрЃљрЃА...",
        parse_mode="Markdown",
        reply_markup=get_listening_keyboard()
    )
    
    # рЃерЃћрЃЋрЃўрЃюрЃљрЃ«рЃЮрЃЌ рЃАрЃбрЃћрЃўрЃбрЃерЃў
    await state.update_data(
        song_id=song_id,
        message_id=listening_message.message_id,
        listening_start=user.listening_start_time.timestamp()
    )
    
    await UserStates.listening.set()

@dp.callback_query_handler(lambda c: c.data == 'stop_listening', state=UserStates.listening)
async def process_stop_listening(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user = users_db.get(user_id)
    
    if not user or not user.current_song:
        await callback_query.answer("рЃљрЃа рЃЏрЃЮрЃўрЃАрЃЏрЃћрЃюрЃА рЃАрЃўрЃЏрЃдрЃћрЃарЃљрЃА рЃљрЃЏрЃЪрЃљрЃЏрЃљрЃЊ.")
        await UserStates.menu.set()
        return
    
    # рЃњрЃљрЃЏрЃЮрЃЌрЃЋрЃљрЃџрЃћ рЃарЃљрЃЏрЃЊрЃћрЃюрЃў рЃ«рЃљрЃюрЃў рЃЏрЃЮрЃўрЃАрЃЏрЃўрЃюрЃљ
    now = datetime.now()
    listened_time = (now - user.listening_start_time).total_seconds()
    song_duration = user.current_song['duration']
    
    if listened_time < song_duration * 0.5:
        # рЃЏрЃўрЃюрЃўрЃЏрЃБрЃЏ рЃюрЃљрЃ«рЃћрЃЋрЃљрЃарЃў рЃБрЃюрЃЊрЃљ рЃЏрЃЮрЃБрЃАрЃЏрЃўрЃюрЃЮрЃА рЃЏрЃЮрЃюрЃћрЃбрЃћрЃЉрЃўрЃА рЃЏрЃўрЃАрЃљрЃдрЃћрЃЉрЃљрЃЊ
        await callback_query.message.edit_text(
            "­ЪЏЉ рЃЏрЃЮрЃАрЃЏрЃћрЃюрЃљ рЃерЃћрЃгрЃДрЃЋрЃћрЃбрЃўрЃџрЃўрЃљ. рЃЏрЃЮрЃюрЃћрЃбрЃћрЃЉрЃўрЃА рЃЏрЃўрЃАрЃљрЃдрЃћрЃЉрЃљрЃЊ рЃБрЃюрЃЊрЃљ рЃЏрЃЮрЃБрЃАрЃЏрЃўрЃюрЃЮ рЃАрЃўрЃЏрЃдрЃћрЃарЃўрЃА рЃЏрЃўрЃюрЃўрЃЏрЃБрЃЏ рЃюрЃљрЃ«рЃћрЃЋрЃљрЃарЃА.",
            reply_markup=get_main_keyboard()
        )
    else:
        # рЃЏрЃЮрЃюрЃћрЃбрЃћрЃЉрЃўрЃА рЃарЃљрЃЮрЃЊрЃћрЃюрЃЮрЃЉрЃљ рЃЊрЃљрЃЏрЃЮрЃЎрЃўрЃЊрЃћрЃЉрЃБрЃџрЃўрЃљ рЃЏрЃЮрЃАрЃЏрЃћрЃюрЃўрЃџ рЃЊрЃарЃЮрЃќрЃћ
        coins_earned = int(user.current_song['coins'] * min(1, listened_time / song_duration))
        user.coins += coins_earned
        user.daily_listened += 1
        
        await callback_query.message.edit_text(
            f"РюЁ рЃЏрЃЮрЃАрЃЏрЃћрЃюрЃљ рЃЊрЃљрЃАрЃарЃБрЃџрЃћрЃЉрЃБрЃџрЃўрЃљ!\n\n"
            f"рЃЏрЃЮрЃњрЃћрЃЉрЃБрЃџрЃў рЃЏрЃЮрЃюрЃћрЃбрЃћрЃЉрЃў: {coins_earned} ­ЪфЎ\n"
            f"рЃљрЃ«рЃљрЃџрЃў рЃЉрЃљрЃџрЃљрЃюрЃАрЃў: {user.coins} ­ЪфЎ\n"
            f"рЃЊрЃљрЃарЃЕрЃћрЃюрЃўрЃџрЃў рЃћрЃюрЃћрЃарЃњрЃўрЃљ: {user.energy} РџА",
            reply_markup=get_main_keyboard()
        )
    
    user.current_song = None
    user.listening_start_time = None
    await UserStates.menu.set()

# рЃљрЃЋрЃбрЃЮрЃЏрЃљрЃбрЃБрЃарЃў рЃЊрЃљрЃАрЃарЃБрЃџрЃћрЃЉрЃўрЃА рЃАрЃўрЃЏрЃБрЃџрЃљрЃфрЃўрЃљ - рЃарЃћрЃљрЃџрЃБрЃа рЃљрЃърЃџрЃўрЃЎрЃљрЃфрЃўрЃљрЃерЃў рЃћрЃА рЃБрЃюрЃЊрЃљ рЃерЃћрЃАрЃарЃБрЃџрЃЊрЃћрЃА рЃАрЃ«рЃЋрЃљ рЃњрЃќрЃўрЃЌ
async def check_listening_sessions():
    while True:
        try:
            current_time = datetime.now()
            for user_id, user in users_db.items():
                if user.current_song and user.listening_start_time:
                    listened_time = (current_time - user.listening_start_time).total_seconds()
                    if listened_time >= user.current_song['duration']:
                        # рЃАрЃўрЃЏрЃдрЃћрЃарЃљ рЃЊрЃљрЃАрЃарЃБрЃџрЃЊрЃљ, рЃЏрЃўрЃљрЃюрЃўрЃГрЃћ рЃЏрЃЮрЃюрЃћрЃбрЃћрЃЉрЃў
                        user.coins += user.current_song['coins']
                        user.daily_listened += 1
                        
                        # рЃерЃћрЃбрЃДрЃЮрЃЉрЃўрЃюрЃћрЃЉрЃљ рЃњрЃљрЃБрЃњрЃќрЃљрЃЋрЃюрЃћ рЃЏрЃЮрЃЏрЃ«рЃЏрЃљрЃарЃћрЃЉрЃћрЃџрЃА
                        try:
                            await bot.send_message(
                                user_id,
                                f"РюЁ рЃАрЃўрЃЏрЃдрЃћрЃарЃљ рЃЊрЃљрЃАрЃарЃБрЃџрЃЊрЃљ: {user.current_song['title']}\n\n"
                                f"рЃЏрЃЮрЃњрЃћрЃЉрЃБрЃџрЃў рЃЏрЃЮрЃюрЃћрЃбрЃћрЃЉрЃў: {user.current_song['coins']} ­ЪфЎ\n"
                                f"рЃљрЃ«рЃљрЃџрЃў рЃЉрЃљрЃџрЃљрЃюрЃАрЃў: {user.coins} ­ЪфЎ\n"
                                f"рЃЊрЃљрЃарЃЕрЃћрЃюрЃўрЃџрЃў рЃћрЃюрЃћрЃарЃњрЃўрЃљ: {user.energy} РџА",
                                reply_markup=get_main_keyboard()
                            )
                        except Exception as e:
                            logger.error(f"Error sending message: {e}")
                        
                        user.current_song = None
                        user.listening_start_time = None
                
                # рЃћрЃюрЃћрЃарЃњрЃўрЃўрЃА рЃљрЃдрЃЊрЃњрЃћрЃюрЃљ
                user.update_energy()
                
        except Exception as e:
            logger.error(f"Error in background task: {e}")
        
        await asyncio.sleep(5)  # рЃерЃћрЃљрЃЏрЃЮрЃгрЃЏрЃћ рЃДрЃЮрЃЋрЃћрЃџ 5 рЃгрЃљрЃЏрЃерЃў

@dp.callback_query_handler(lambda c: c.data == 'shop', state='*')
async def process_shop(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user = users_db.get(user_id)
    
    if not user:
        await callback_query.answer("рЃњрЃЌрЃ«рЃЮрЃЋрЃЌ, рЃ»рЃћрЃа рЃЊрЃљрЃўрЃгрЃДрЃћрЃЌ рЃЌрЃљрЃЏрЃљрЃерЃў /start рЃЉрЃарЃФрЃљрЃюрЃћрЃЉрЃўрЃЌ.")
        return
    
    await callback_query.message.edit_text(
        f"­ЪЈф *рЃЏрЃљрЃдрЃљрЃќрЃўрЃљ*\n\n"
        f"рЃерЃћрЃюрЃў рЃЉрЃљрЃџрЃљрЃюрЃАрЃў: {user.coins} ­ЪфЎ\n\n"
        f"рЃљрЃўрЃарЃЕрЃўрЃћ рЃюрЃўрЃЋрЃЌрЃў рЃерЃћрЃАрЃљрЃФрЃћрЃюрЃљрЃЊ:",
        parse_mode="Markdown",
        reply_markup=get_shop_keyboard()
    )
    await UserStates.shop.set()

@dp.callback_query_handler(lambda c: c.data.startswith('buy_'), state=UserStates.shop)
async def process_buy(callback_query: types.CallbackQuery, state: FSMContext):
    item = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id
    user = users_db.get(user_id)
    
    if not user:
        await callback_query.answer("рЃњрЃЌрЃ«рЃЮрЃЋрЃЌ, рЃ»рЃћрЃа рЃЊрЃљрЃўрЃгрЃДрЃћрЃЌ рЃЌрЃљрЃЏрЃљрЃерЃў.")
        return
    
    price = 0
    item_name = ""
    success_message = ""
    
    if item == "energy":
        price = 100
        item_name = "рЃћрЃюрЃћрЃарЃњрЃўрЃўрЃА рЃерЃћрЃЋрЃАрЃћрЃЉрЃљ"
        if user.coins >= price:
            user.coins -= price
            user.energy = min(100, user.energy + 50)
            success_message = f"РџА рЃерЃћрЃўрЃФрЃўрЃюрЃћ +50 рЃћрЃюрЃћрЃарЃњрЃўрЃљ! рЃљрЃ«рЃљрЃџрЃў рЃЏрЃљрЃЕрЃЋрЃћрЃюрЃћрЃЉрЃћрЃџрЃў: {user.energy}/100"
        
    elif item == "booster":
        price = 200
        item_name = "рЃЊрЃарЃЮрЃўрЃА рЃљрЃЏрЃљрЃЕрЃЦрЃљрЃарЃћрЃЉрЃћрЃџрЃў"
        if user.coins >= price:
            user.coins -= price
            user.items.append("рЃЊрЃарЃЮрЃўрЃА рЃљрЃЏрЃљрЃЕрЃЦрЃљрЃарЃћрЃЉрЃћрЃџрЃў")
            success_message = "РЈ▒ рЃерЃћрЃўрЃФрЃўрЃюрЃћ рЃЊрЃарЃЮрЃўрЃА рЃљрЃЏрЃљрЃЕрЃЦрЃљрЃарЃћрЃЉрЃћрЃџрЃў! рЃљрЃ«рЃџрЃљ рЃАрЃўрЃЏрЃдрЃћрЃарЃћрЃЉрЃА 2-рЃ»рЃћрЃа рЃБрЃцрЃарЃЮ рЃАрЃгрЃарЃљрЃцрЃљрЃЊ рЃЏрЃЮрЃўрЃАрЃЏрЃћрЃю."
        
    elif item == "vip":
        price = 500
        item_name = "VIP рЃАрЃбрЃљрЃбрЃБрЃАрЃў"
        if user.coins >= price:
            user.coins -= price
            user.items.append("VIP рЃАрЃбрЃљрЃбрЃБрЃАрЃў")
            success_message = "­ЪїЪ рЃерЃћрЃўрЃФрЃўрЃюрЃћ VIP рЃАрЃбрЃљрЃбрЃБрЃАрЃў! рЃљрЃ«рЃџрЃљ рЃЏрЃўрЃўрЃдрЃћрЃЉ +50% рЃЏрЃћрЃб рЃЏрЃЮрЃюрЃћрЃбрЃћрЃЉрЃА рЃДрЃЋрЃћрЃџрЃљ рЃАрЃўрЃЏрЃдрЃћрЃарЃљрЃќрЃћ."
    
    if success_message:
        await callback_query.answer(f"рЃгрЃљрЃарЃЏрЃљрЃбрЃћрЃЉрЃўрЃЌ рЃерЃћрЃўрЃФрЃўрЃюрЃћ: {item_name}")
        await callback_query.message.edit_text(
            f"{success_message}\n\n"
            f"рЃЊрЃљрЃарЃЕрЃћрЃюрЃўрЃџрЃў рЃЉрЃљрЃџрЃљрЃюрЃАрЃў: {user.coins} ­ЪфЎ",
            reply_markup=get_main_keyboard()
        )
        await UserStates.menu.set()
    else:
        await callback_query.answer(f"рЃљрЃа рЃњрЃљрЃЦрЃЋрЃА рЃАрЃљрЃЎрЃЏрЃљрЃарЃўрЃАрЃў рЃЏрЃЮрЃюрЃћрЃбрЃћрЃЉрЃў. рЃАрЃљрЃГрЃўрЃарЃЮрЃљ {price} ­ЪфЎ.")

@dp.callback_query_handler(lambda c: c.data == 'profile', state='*')
async def process_profile(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if user_id in users_db:
        user = users_db[user_id]
        user.update_energy()
        user.reset_daily_if_needed()
        
        items_text = "рЃљрЃарЃљрЃцрЃћрЃарЃў" if not user.items else ", ".join(user.items)
        
        await callback_query.message.edit_text(
            f"­ЪЉц *рЃерЃћрЃюрЃў рЃърЃарЃЮрЃцрЃўрЃџрЃў*\n\n"
            f"рЃАрЃљрЃ«рЃћрЃџрЃў: {user.username}\n"
            f"рЃЏрЃЮрЃюрЃћрЃбрЃћрЃЉрЃў: {user.coins} ­ЪфЎ\n"
            f"рЃћрЃюрЃћрЃарЃњрЃўрЃљ: {user.energy}/100 РџА\n"
            f"рЃЊрЃдрЃћрЃА рЃЏрЃЮрЃАрЃЏрЃћрЃюрЃўрЃџрЃў: {user.daily_listened}/20 ­Ъјх\n"
            f"рЃерЃћрЃюрЃў рЃюрЃўрЃЋрЃЌрЃћрЃЉрЃў: {items_text}",
            parse_mode="Markdown",
            reply_markup=get_main_keyboard()
        )
    else:
        await callback_query.answer("рЃњрЃЌрЃ«рЃЮрЃЋрЃЌ, рЃ»рЃћрЃа рЃЊрЃљрЃўрЃгрЃДрЃћрЃЌ рЃЌрЃљрЃЏрЃљрЃерЃў /start рЃЉрЃарЃФрЃљрЃюрЃћрЃЉрЃўрЃЌ.")

@dp.callback_query_handler(lambda c: c.data == 'leaderboard', state='*')
async def process_leaderboard(callback_query: types.CallbackQuery, state: FSMContext):
    # рЃарЃћрЃўрЃбрЃўрЃюрЃњрЃўрЃА рЃАрЃЮрЃарЃбрЃўрЃарЃћрЃЉрЃљ рЃЏрЃЮрЃюрЃћрЃбрЃћрЃЉрЃўрЃА рЃЏрЃўрЃ«рЃћрЃЊрЃЋрЃўрЃЌ
    sorted_users = sorted(users_db.values(), key=lambda u: u.coins, reverse=True)
    
    leaderboard_text = "­ЪЊі *рЃЏрЃЮрЃЌрЃљрЃЏрЃљрЃерЃћрЃћрЃЉрЃўрЃА рЃарЃћрЃўрЃбрЃўрЃюрЃњрЃў*\n\n"
    
    for i, user in enumerate(sorted_users[:10], 1):
        leaderboard_text += f"{i}. {user.username}: {user.coins} ­ЪфЎ\n"
    
    if not sorted_users:
        leaderboard_text += "рЃарЃћрЃўрЃбрЃўрЃюрЃњрЃерЃў рЃ»рЃћрЃа рЃљрЃарЃљрЃЋрЃўрЃюрЃљрЃљ."
    
    await callback_query.message.edit_text(
        leaderboard_text,
        parse_mode="Markdown",
        reply_markup=get_main_keyboard()
    )

@dp.callback_query_handler(lambda c: c.data == 'back_to_main', state='*')
async def process_back_to_main(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user = users_db.get(user_id, None)
    
    if user:
        user.update_energy()
        await callback_query.message.edit_text(
            f"рЃЏрЃЌрЃљрЃЋрЃљрЃарЃў рЃЏрЃћрЃюрЃўрЃБ\n\n"
            f"рЃЏрЃЮрЃюрЃћрЃбрЃћрЃЉрЃў: {user.coins} ­ЪфЎ\n"
            f"рЃћрЃюрЃћрЃарЃњрЃўрЃљ: {user.energy}/100 РџА\n\n"
            f"рЃарЃўрЃАрЃў рЃњрЃљрЃЎрЃћрЃЌрЃћрЃЉрЃљ рЃњрЃАрЃБрЃарЃА?",
            reply_markup=get_main_keyboard()
        )
    else:
        await callback_query.message.edit_text(
            "рЃЏрЃЌрЃљрЃЋрЃљрЃарЃў рЃЏрЃћрЃюрЃўрЃБ\n\n"
            "рЃњрЃЌрЃ«рЃЮрЃЋрЃЌ, рЃЊрЃљрЃўрЃгрЃДрЃћрЃЌ рЃЌрЃљрЃЏрЃљрЃерЃў /start рЃЉрЃарЃФрЃљрЃюрЃћрЃЉрЃўрЃЌ.",
            reply_markup=get_main_keyboard()
        )
    
    await UserStates.menu.set()

# рЃФрЃўрЃарЃўрЃЌрЃљрЃЊрЃў рЃЉрЃарЃФрЃљрЃюрЃћрЃЉрЃљ рЃЉрЃЮрЃбрЃўрЃА рЃњрЃљрЃАрЃљрЃерЃЋрЃћрЃЉрЃљрЃЊ
async def main():
    # рЃцрЃЮрЃюрЃБрЃарЃў рЃбрЃљрЃАрЃЎрЃў рЃАрЃўрЃЏрЃдрЃћрЃарЃћрЃЉрЃўрЃА рЃерЃћрЃАрЃљрЃЏрЃЮрЃгрЃЏрЃћрЃЉрЃџрЃљрЃЊ
    asyncio.create_task(check_listening_sessions())
    
    # рЃърЃЮрЃџрЃўрЃюрЃњрЃўрЃА рЃЊрЃљрЃгрЃДрЃћрЃЉрЃљ
    await dp.start_polling()

if __name__ == '__main__':
    asyncio.run(main())
